name: Build and Deploy

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.ref }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Display repository structure
      run: |
        echo "Repository structure:"
        ls -la
        echo "Project files:"
        find . -name "*.py" -o -name "*.js" -o -name "*.json" -o -name "*.md" -o -name "*.txt" | head -20

    - name: Detect project type and build
      run: |
        echo "Detecting project type..."
        
        # Python projesi kontrolü
        if [ -f "requirements.txt" ]; then
          echo "Python project detected"
          pip install -r requirements.txt
        elif [ -f "Pipfile" ]; then
          echo "Pipenv project detected"
          pip install pipenv
          pipenv install
        elif [ -f "setup.py" ]; then
          echo "Python package detected"
          pip install -e .
        fi

        # Node.js projesi kontrolü
        if [ -f "package.json" ]; then
          echo "Node.js project detected"
          npm ci
          if [ -f "package-lock.json" ] || [ -f "npm-shrinkwrap.json" ]; then
            npm ci
          else
            npm install
          fi
        fi

        # Go projesi kontrolü
        if [ -f "go.mod" ]; then
          echo "Go project detected"
          go mod download
          go build -o bin/ ./...
        fi

    - name: Create basic build structure
      run: |
        mkdir -p dist
        echo "UmayTV Build - $(date)" > dist/build-info.txt
        echo "Commit: ${{ github.sha }}" >> dist/build-info.txt
        echo "Branch: ${{ github.ref }}" >> dist/build-info.txt
        
        # Eğer public klasörü varsa kopyala
        if [ -d "public" ]; then
          cp -r public/* dist/
        fi
        
        # Eğer static dosyalar varsa
        if [ -d "static" ]; then
          cp -r static dist/ 2>/dev/null || true
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/
        retention-days: 7

  validate:
    name: Validate Repository
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Validate files
      run: |
        echo "=== Repository Validation ==="
        echo "Current branch: ${{ github.ref }}"
        echo "Working directory:"
        pwd
        ls -la
        
        echo "=== File Structure ==="
        find . -type f -name "*.md" -o -name "*.py" -o -name "*.js" -o -name "*.json" -o -name "*.txt" -o -name "*.yml" -o -name "*.yaml" | sort
        
        echo "=== Top-level files ==="
        ls -la

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    - name: Generate basic docs
      run: |
        mkdir -p docs
        echo "# UmayTV Documentation" > docs/README.md
        echo "Build Date: $(date)" >> docs/README.md
        echo "Version: ${{ github.sha }}" >> docs/README.md
        echo "" >> docs/README.md
        echo "## Repository Structure" >> docs/README.md
        echo '```' >> docs/README.md
        find . -type f -name "*.py" -o -name "*.js" -o -name "*.json" -o -name "*.md" | head -30 >> docs/README.md
        echo '```' >> docs/README.md

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 30
