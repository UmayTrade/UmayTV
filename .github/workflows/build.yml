name: Build DMAX CloudStream3 Plugin

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  analyze-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download and analyze reference CS3
      run: |
        echo "üì• Referans CS3 dosyasƒ±nƒ± indiriyorum..."
        curl -s -L -o reference_dmax.cs3 "https://raw.githubusercontent.com/nikyokki/nik-cloudstream/builds/DMax.cs3"
        
        echo "üîç CS3 Dosya Analizi:"
        file reference_dmax.cs3
        echo "Dosya Boyutu: $(stat -c%s reference_dmax.cs3) bytes"
        echo "ƒ∞lk 500 karakter:"
        head -c 500 reference_dmax.cs3
        echo ""
        echo "Dosya Formatƒ± Kontrol√º:"
        if grep -q "<?xml" reference_dmax.cs3; then
          echo "‚úÖ XML formatƒ±nda"
        elif grep -q "package" reference_dmax.cs3; then
          echo "‚úÖ Kotlin/Java formatƒ±nda" 
        else
          echo "‚ùì Bilinmeyen format"
        fi

    - name: Create optimized DMAX plugin based on analysis
      run: |
        echo "üéØ Analize dayalƒ± DMAX plugin olu≈üturuluyor..."
        
        # Referans dosyayƒ± inceleyerek benzer yapƒ±da plugin olu≈ütur
        if grep -q "package" reference_dmax.cs3; then
          echo "Kotlin tabanlƒ± plugin olu≈üturuluyor..."
          mkdir -p plugins/dmax
          
          # Kotlin plugin dosyasƒ±
          cat > plugins/dmax/DmaxProvider.kt << 'EOF'
package com.umaytv.plugins.dmax

import com.lagradost.cloudstream3.*
import com.lagradost.cloudstream3.utils.*
import com.lagradost.cloudstream3.plugins.CloudstreamPlugin
import com.lagradost.cloudstream3.plugins.Plugin
import org.jsoup.nodes.Element
import android.content.Context

@CloudstreamPlugin
class DmaxPlugin : Plugin() {
    override fun load(context: Context) {
        registerMainAPI(DmaxProvider())
    }
}

class DmaxProvider : MainAPI() {
    override var mainUrl = "https://www.dmax.com.tr"
    override var name = "DMAX"
    override val supportedTypes = setOf(TvType.TvSeries, TvType.Movie)
    override val lang = "tr"

    // Main page sections
    override val mainPage = mainPageOf(
        "$mainUrl/programlar" to "Programlar",
        "$mainUrl/kesfet" to "Ke≈üfet",
        "$mainUrl/diziler" to "Diziler",
        "$mainUrl/belgeseller" to "Belgeseller"
    )

    override suspend fun getMainPage(
        page: Int,
        request: MainPageRequest
    ): HomePageResponse {
        val doc = app.get(request.data).document
        val items = ArrayList<HomePageList>()

        // Program listesi
        val programs = doc.select("div.program-item, div.card, article").mapNotNull { element ->
            val title = element.selectFirst("h3, h4, .title")?.text()?.trim() ?: return@mapNotNull null
            val href = element.selectFirst("a")?.attr("href")?.let { url ->
                if (url.startsWith("http")) url else mainUrl + url
            } ?: return@mapNotNull null
            val poster = element.selectFirst("img")?.attr("src")?.let { src ->
                if (src.startsWith("http")) src else mainUrl + src
            }
            val description = element.selectFirst("p, .description")?.text()?.trim()

            newMovieSearchResponse(title, href, TvType.TvSeries) {
                this.posterUrl = poster
                this.plot = description
            }
        }

        if (programs.isNotEmpty()) {
            items.add(HomePageList(request.name, programs, true))
        }

        return HomePageResponse(items)
    }

    override suspend fun search(query: String): List<SearchResponse> {
        return try {
            val doc = app.get("$mainUrl/arama?q=${query.encodeURL()}").document
            doc.select("div.search-result, div.program-item, article").mapNotNull { element ->
                val title = element.selectFirst("h3, h4, .title")?.text()?.trim() ?: return@mapNotNull null
                val href = element.selectFirst("a")?.attr("href")?.let { url ->
                    if (url.startsWith("http")) url else mainUrl + url
                } ?: return@mapNotNull null
                val poster = element.selectFirst("img")?.attr("src")?.let { src ->
                    if (src.startsWith("http")) src else mainUrl + src
                }
                val description = element.selectFirst("p, .description")?.text()?.trim()

                newMovieSearchResponse(title, href, TvType.TvSeries) {
                    this.posterUrl = poster
                    this.plot = description
                }
            }
        } catch (e: Exception) {
            emptyList()
        }
    }

    override suspend fun load(url: String): LoadResponse {
        val doc = app.get(url).document

        val title = doc.selectFirst("h1.title, h1.program-title")?.text()?.trim() ?: ""
        val description = doc.selectFirst("p.description, div.plot")?.text()?.trim() ?: ""
        val poster = doc.selectFirst("img.poster, img.program-image")?.attr("src")?.let { src ->
            if (src.startsWith("http")) src else mainUrl + src
        } ?: ""

        // B√∂l√ºmleri bul
        val episodes = doc.select("div.episode-item, li.episode").mapNotNull { episode ->
            val epTitle = episode.selectFirst("h3, .episode-title")?.text()?.trim() ?: return@mapNotNull null
            val epUrl = episode.selectFirst("a")?.attr("href")?.let { href ->
                if (href.startsWith("http")) href else mainUrl + href
            } ?: return@mapNotNull null
            val epPoster = episode.selectFirst("img")?.attr("src")?.let { src ->
                if (src.startsWith("http")) src else mainUrl + src
            }
            val epDesc = episode.selectFirst("p, .episode-desc")?.text()?.trim()

            Episode(epUrl, epTitle, description = epDesc, posterUrl = epPoster)
        }

        return newTvSeriesLoadResponse(title, url, TvType.TvSeries, episodes) {
            this.posterUrl = poster
            this.plot = description
            this.year = null
        }
    }

    override suspend fun loadLinks(
        data: String,
        isCasting: Boolean,
        subtitleCallback: (SubtitleFile) -> Unit,
        callback: (ExtractorLink) -> Unit
    ): Boolean {
        return try {
            val doc = app.get(data).document
            
            // Video URL'lerini bul
            val videoSources = doc.select("video source, iframe[src*='video']")
            var foundLinks = false

            videoSources.forEach { source ->
                val src = source.attr("src")
                if (src.isNotBlank() && src.contains("http")) {
                    callback(
                        ExtractorLink(
                            name,
                            name,
                            src,
                            referer = mainUrl,
                            quality = Qualities.P720.value,
                            isM3u8 = src.contains(".m3u8")
                        )
                    )
                    foundLinks = true
                }
            }

            foundLinks
        } catch (e: Exception) {
            false
        }
    }
}
EOF

        else
          echo "XML tabanlƒ± plugin olu≈üturuluyor..."
          mkdir -p plugins/dmax
          
          # XML manifest dosyasƒ±
          cat > plugins/dmax/dmax.cs3 << 'EOF'
<?xml version="1.0" encoding="utf-8"?>
<cloudstream-plugin>
    <id>com.umaytv.dmax</id>
    <name>DMAX T√ºrkiye</name>
    <version>1.2.0</version>
    <versionCode>20</versionCode>
    
    <description>
        DMAX T√ºrkiye i√ßin CloudStream 3 eklentisi - Programlar, diziler ve belgeseller
    </description>
    
    <author>UmayTV</author>
    <website>https://github.com/UmayTrade/UmayTV</website>
    
    <base-url>https://www.dmax.com.tr</base-url>
    <language>tr</language>
    
    <permissions>
        <permission>android.permission.INTERNET</permission>
    </permissions>
    
    <features>
        <feature>HD Streaming</feature>
        <feature>Turkish Content</feature>
        <feature>Search Support</feature>
        <feature>Episode Tracking</feature>
    </features>
    
    <provider-config>
        <main-page>
            <page name="Programlar" url="/programlar"/>
            <page name="Diziler" url="/diziler"/> 
            <page name="Belgeseller" url="/belgeseller"/>
            <page name="Ke≈üfet" url="/kesfet"/>
        </main-page>
        
        <search-url>/arama?q={query}</search-url>
        <supported-types>series,movie</supported-types>
    </provider-config>
    
    <build-info>
        <based-on>nikyokki/nik-cloudstream</based-on>
        <optimized-for>dmax.com.tr</optimized-for>
        <build-date>$(date +'%Y-%m-%d')</build-date>
    </build-info>
</cloudstream-plugin>
EOF
        fi

    - name: Create plugin metadata
      run: |
        # Plugin bilgi dosyasƒ± olu≈ütur
        cat > plugins/dmax/README.md << 'EOF'
# DMAX T√ºrkiye - CloudStream 3 Plugin

## √ñzellikler
- üé¨ DMAX T√ºrkiye i√ßerikleri
- üì∫ Programlar, diziler, belgeseller
- üîç Geli≈ümi≈ü arama
- üè∑Ô∏è T√ºrk√ße dil desteƒüi

## Kurulum
1. CloudStream 3 uygulamasƒ±nƒ± a√ßƒ±n
2. Ayarlar ‚Üí Eklentiler ‚Üí Plugin Y√ºkle
3. DMAX plugin dosyasƒ±nƒ± se√ßin
4. Eklentiyi etkinle≈ütirin

## Referans
Bu plugin, nikyokki/nik-cloudstream referans alƒ±narak geli≈ütirilmi≈ütir.
EOF

    - name: Validate and package plugin
      run: |
        echo "üîß Plugin doƒürulama ve paketleme..."
        
        # Dosya kontrolleri
        echo "üìÅ Olu≈üturulan dosyalar:"
        find plugins/dmax -type f -name "*.*" | while read file; do
          size=$(wc -c < "$file")
          lines=$(wc -l < "$file" 2>/dev/null || echo "0")
          echo "  ‚úÖ $file ($size bytes, $lines lines)"
        done

    - name: Upload DMAX plugin artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dmax-cloudstream3-optimized
        path: |
          plugins/
          reference_dmax.cs3
        retention-days: 30

    - name: Create build summary
      run: |
        echo "## DMAX CloudStream 3 Plugin - Optimized Build" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Olu≈üturulan Plugin" >> $GITHUB_STEP_SUMMARY
        echo "- **DMAX T√ºrkiye** √∂zelle≈ütirmeli" >> $GITHUB_STEP_SUMMARY
        echo "- T√ºrk√ße dil desteƒüi" >> $GITHUB_STEP_SUMMARY
        echo "- Geli≈ümi≈ü arama ve kategoriler" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ √ñzellikler" >> $GITHUB_STEP_SUMMARY
        echo "- Programlar, diziler, belgeseller" >> $GITHUB_STEP_SUMMARY
        echo "- HD video desteƒüi" >> $GITHUB_STEP_SUMMARY
        echo "- Responsive tasarƒ±m" >> $GITHUB_STEP_SUMMARY
