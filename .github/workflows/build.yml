name: Build CloudStream3 Plugins

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build and Generate CS3 Metadata
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Detect and list plugins
        id: list_plugins
        run: |
          echo "Detecting CloudStream3 plugins..."
          # Find directories that contain a "src" folder (common plugin layout).
          PLUGINS="$(find . -type d -name src -print0 | xargs -0 -n1 dirname | grep -v 'node_modules' || true)"
          echo "Found plugin paths:"
          echo "$PLUGINS"
          # Export multiline output properly to GITHUB_OUTPUT
          {
            echo "plugins<<EOF"
            echo "$PLUGINS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Generate .cs3 plugin manifests
        run: |
          echo "Generating .cs3 manifests..."
          mkdir -p .cs3
          COUNTER=0
          # iterate over plugin dirs (split by lines)
          while IFS= read -r plugin_dir; do
            [ -z "$plugin_dir" ] && continue
            # normalize plugin_dir (remove leading ./ if present)
            plugin_dir="${plugin_dir#./}"
            name="$(basename "$plugin_dir")"
            cs3_file=".cs3/${name}.cs3"
            cat > "$cs3_file" << EOF
{
  "name": "${name}",
  "version": "1.0.${COUNTER}",
  "type": "plugin",
  "description": "CloudStream3 plugin: ${name}",
  "entry_point": "${plugin_dir}/src",
  "dependencies": [],
  "config": {
    "enabled": true
  }
}
EOF
            echo "Created $cs3_file"
            COUNTER=$((COUNTER + 1))
          done <<< "${{ steps.list_plugins.outputs.plugins }}"

      - name: Create plugins.json
        run: |
          echo "Generating plugins.json..."
          jq_plugins="[]"

          # build an array by iterating cs3 files
          for file in .cs3/*.cs3; do
            [ -f "$file" ] || continue
            name=$(basename "$file" .cs3)
            url="https://raw.githubusercontent.com/${{ github.repository }}/main/.cs3/${name}.cs3"

            # create plugin object as JSON and append to array using jq (safe)
            plugin_json=$(jq -n \
              --arg id "$name" \
              --arg namev "$name" \
              --arg desc "CloudStream3 plugin ${name}" \
              --arg ver "1.0.0" \
              --arg auth "UmayTrade" \
              --arg cs3_url "$url" \
              '{
                id: $id,
                name: $namev,
                description: $desc,
                version: $ver,
                author: $auth,
                cs3_url: $cs3_url,
                enabled: true,
                dependencies: []
              }'
            )
            jq_plugins=$(jq -s 'add' <(echo "$jq_plugins") <(echo "[$plugin_json]") 2>/dev/null || jq -n --argjson a "$jq_plugins" --argjson b "[$plugin_json]" '$a + $b')
          done

          # compose final plugins.json
          jq -n \
            --arg name "CloudStream3 Plugins" \
            --arg ver "1.0.0" \
            --arg repo "https://github.com/${{ github.repository }}" \
            --argjson plugins "$jq_plugins" \
            '{
              name: $name,
              version: $ver,
              repository: $repo,
              plugins: $plugins,
              config: {
                auto_update: true,
                cache_plugins: true,
                log_level: "info"
              }
            }' > plugins.json

          echo "plugins.json created successfully"
          cat plugins.json

      - name: Create repo.json
        run: |
          echo "Generating repo.json..."
          cat > repo.json << EOF
{
  "name": "UmayTrade CS3 Repository",
  "version": "1.0.0",
  "description": "Official CloudStream3 Plugin Repository",
  "url": "https://github.com/${{ github.repository }}",
  "plugins_config": "https://raw.githubusercontent.com/${{ github.repository }}/main/plugins.json",
  "cs3_config": "https://raw.githubusercontent.com/${{ github.repository }}/main/.cs3/",
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
          echo "repo.json created successfully"
          cat repo.json

      - name: Validate JSON files
        run: |
          echo "Validating JSON syntax..."
          python -m json.tool plugins.json > /dev/null && echo "✓ plugins.json valid"
          python -m json.tool repo.json > /dev/null && echo "✓ repo.json valid"
          for cs3 in .cs3/*.cs3; do
            [ -f "$cs3" ] || continue
            python -m json.tool "$cs3" > /dev/null && echo "✓ $cs3 valid"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cs3-artifacts
          path: |
            .cs3/
            plugins.json
            repo.json
          retention-days: 7

  deploy:
    name: Deploy CS3 Files to Main
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cs3-artifacts
          path: ./dist

      - name: Copy artifacts into repo
        run: |
          mkdir -p .cs3
          if [ -d dist/.cs3 ]; then
            cp -r dist/.cs3/* .cs3/
          fi
          cp -f dist/plugins.json . || cp -f plugins.json .
          cp -f dist/repo.json . || cp -f repo.json .

      - name: Commit and push updated configs
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .cs3 plugins.json repo.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update CS3 manifests ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            git push origin main
          fi
