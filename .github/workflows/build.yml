name: Build CloudStream3 Plugins

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build and Generate CS3 Metadata
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Detect and list plugins
        id: list_plugins
        run: |
          echo "Detecting CloudStream3 plugins..."
          PLUGINS=$(find . -type d -name "src" -exec dirname {} \; | grep -v "node_modules" || true)
          echo "Found plugins:"
          echo "$PLUGINS"
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT

      - name: Generate .cs3 plugin manifests
        env:
          PLUGINS: ${{ steps.list_plugins.outputs.plugins }}
        run: |
          echo "Generating .cs3 manifests..."
          mkdir -p .cs3
          COUNTER=0
          for plugin_dir in $PLUGINS; do
            [ -z "$plugin_dir" ] && continue
            name=$(basename "$plugin_dir")
            cs3_file=".cs3/${name}.cs3"
            echo "Creating $cs3_file"
            cat > "$cs3_file" <<EOF
{
  "name": "${name}",
  "version": "1.0.${COUNTER}",
  "type": "plugin",
  "description": "CloudStream3 plugin: ${name}",
  "entry_point": "${plugin_dir}/src",
  "dependencies": [],
  "config": { "enabled": true }
}
EOF
            COUNTER=$((COUNTER + 1))
          done
          echo "CS3 manifests created:"
          ls -la .cs3

      - name: Create plugins.json
        run: |
          echo "Creating plugins.json..."
          echo '{ "name": "CloudStream3 Plugins", "version": "1.0.0", "plugins": [' > plugins.json
          FIRST=true
          for file in .cs3/*.cs3; do
            [ -f "$file" ] || continue
            NAME=$(basename "$file" .cs3)
            URL="https://raw.githubusercontent.com/${{ github.repository }}/main/.cs3/${NAME}.cs3"
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              echo "," >> plugins.json
            fi
            cat <<EOF >> plugins.json
  {
    "id": "${NAME}",
    "name": "${NAME}",
    "version": "1.0.0",
    "author": "UmayTrade",
    "description": "CloudStream3 plugin ${NAME}",
    "cs3_url": "${URL}",
    "enabled": true,
    "dependencies": []
  }
EOF
          done
          echo '] }' >> plugins.json
          echo "plugins.json created successfully"
          cat plugins.json

      - name: Create repo.json
        run: |
          echo "Creating repo.json..."
          cat > repo.json <<EOF
{
  "name": "UmayTrade CS3 Repository",
  "version": "1.0.0",
  "description": "Official CloudStream3 Plugin Repository",
  "url": "https://github.com/${{ github.repository }}",
  "plugins_config": "https://raw.githubusercontent.com/${{ github.repository }}/main/plugins.json",
  "cs3_config": "https://raw.githubusercontent.com/${{ github.repository }}/main/.cs3/",
  "last_updated": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
          echo "repo.json created successfully"
          cat repo.json

      - name: Validate JSON files
        run: |
          echo "Validating JSON files..."
          python -m json.tool plugins.json > /dev/null && echo "✓ plugins.json valid"
          python -m json.tool repo.json > /dev/null && echo "✓ repo.json valid"
          for file in .cs3/*.cs3; do
            python -m json.tool "$file" > /dev/null && echo "✓ $file valid"
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cs3-artifacts
          path: |
            .cs3/
            plugins.json
            repo.json
          retention-days: 7

  deploy:
    name: Deploy CS3 Files to Main
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cs3-artifacts
          path: ./dist

      - name: Copy artifacts into repo
        run: |
          mkdir -p .cs3
          if [ -d dist/.cs3 ]; then
            cp -r dist/.cs3/* .cs3/
          fi
          cp dist/plugins.json .
          cp dist/repo.json .

      - name: Commit and push updated configs
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .cs3 plugins.json repo.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-update CS3 manifests ($(date -u +%Y-%m-%dT%H:%M:%SZ))"
            git push origin main
          fi
